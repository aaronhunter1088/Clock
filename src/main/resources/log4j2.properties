# Log Configuration File
# Prints to the Console, an Instance file, and a Master file
name=Clock Logging Configurations
property.folderName=logs
property.masterName=Clock~Master~Logs
property.dailyName=Clock~Daily~Logs
property.instanceName=Clock~Instance~Logs
property.separator=::
property.date=${date:MM}-${date:dd}-${date:yyyy}
property.time=${date:hh}:${date:mm}:${date:ss} ${date:aa}
property.rollOverDaily=%d{MM-dd-yyyy}
#property.rollOverHourly = %d{MM-dd-yyyy_hh}
#property.rollOverMinutely = %d{MM-dd-yyyy_hh-mm}
property.patternWithColor=%highlight{%-6level}{FATAL=bg_red, ERROR=bg_red, WARN=yellow, INFO=green, DEBUG=cyan} %d{MM-dd-yyyy hh:mm:ss.SSS a} [%c:%M:%L] ${separator} %msg%n
property.patternNoColor=%-6level %d{MM-dd-yyyy hh:mm:ss.SSS a} [%c:%M:%L] ${separator} %msg%n

# Appenders are responsible for writing the LogEvents to its target destination
# Appenders always have a name so that they can be referenced from Loggers.
# https://logging.apache.org/log4j/2.x/manual/appenders.html
appenders=console, master, daily, instance

#Shows currently running session logs
appender.console.type=Console
appender.console.name=Console
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=${patternWithColor}

#Every run gets printed to this file
appender.master.type=RollingFile
appender.master.name=MasterFile
appender.master.fileName=${folderName}/${masterName}.log
appender.master.filePattern=${folderName}/${masterName}-%i.log
appender.master.layout.type=PatternLayout
appender.master.layout.pattern=${patternNoColor}
appender.master.layout.footer=%n
appender.master.append= true
appender.master.filter.threshold.type=ThresholdFilter
appender.master.filter.threshold.level=${env:logLevel:-all}
appender.master.policies.type=Policies
appender.master.policies.size.type=SizeBasedTriggeringPolicy
appender.master.policies.size.size=1MB
appender.master.strategy.type=DefaultRolloverStrategy

#Every run gets printed to this file, rolls over daily
appender.daily.type=RollingFile
appender.daily.name=DailyFile
appender.daily.fileName=${folderName}/${date}/${dailyName}.log
appender.daily.filePattern=${folderName}/${date}/${rollOverDaily}/${dailyName}.log
appender.daily.layout.type=PatternLayout
appender.daily.layout.pattern=${patternNoColor}
appender.daily.append=true
appender.daily.layout.footer=%n
appender.daily.filter.threshold.type=ThresholdFilter
appender.daily.filter.threshold.level=${env:logLevel:-all}
appender.daily.policies.type=Policies
appender.daily.policies.size.type=SizeBasedTriggeringPolicy
appender.daily.policies.size.size=50MB
appender.daily.policies.time.type=TimeBasedTriggeringPolicy
appender.daily.policies.time.interval=1
appender.daily.policies.time.modulate=true

#Every run gets printed to this file, rolls over when full or a new day
appender.instance.type=RollingFile
appender.instance.name=InstanceFile
appender.instance.fileName=${folderName}/${date}/${time}/${instanceName}.log
appender.instance.filePattern=${folderName}/${date}/${time}/${instanceName}.log
appender.instance.layout.type=PatternLayout
appender.instance.layout.pattern=${patternNoColor}
appender.instance.append=false
appender.instance.layout.footer=%n
appender.instance.filter.threshold.type=ThresholdFilter
appender.instance.filter.threshold.level=${env:logLevel:-all}
appender.instance.policies.type=Policies
appender.instance.policies.startup.type=OnStartupTriggeringPolicy
appender.instance.strategy.type=DefaultRolloverStrategy
#When the the fileIndex attribute is set to "max" the following actions will be performed.
#During the max(1) rollover foo.log is renamed to foo1.log. A new foo.log file is created and starts being written to.
appender.instance.strategy.max=1
appender.instance.strategy.action.type=Delete
appender.instance.strategy.action.basepath=${folderName}/${date}/${time}/
appender.instance.strategy.action.maxdepth=2
appender.instance.strategy.action.condition.type=IfLastModified
appender.instance.strategy.action.condition.age=30D

# Loggers are used to log messages at different levels
loggers=clock
logger.clock.name=clock.entity
logger.clock.level=${env:logLevel:-all}
logger.clock.additivity=true

# Configure root logger, Set env:logLevel in run configs
rootLogger.level = ${env:logLevel:-all}
# root logger to use console appender for logging
rootLogger.appenderRefs=Console, MasterFile, DailyFile, InstanceFile
rootLogger.appenderRef.stdout.ref=Console
rootLogger.appenderRef.master.ref=MasterFile
rootLogger.appenderRef.daily.ref=DailyFile
rootLogger.appenderRef.instance.ref=InstanceFile